amends "pkg/config/pkl/AppCopnfig.pkl"

name = "FR Auth Proxy"

local pingTest: JobConfig = new {
  name = "Can auth Deep"
  tests = new {
    new {
      url = "https://api.staging.fusionreactor.io/frauthproxy/echo"
      expected {
        status = 200
      }
    }
  }
}

jobs = new {
  pingTest

  new {
    name = "example.com"
    tests = new {
      new {
        url = "https://example.com/ping"
        expected {
          status = 404
        }
      }
    }
  }

  new {
    name = "smoke test"
    tests = new {
      new {
        url = "https://www.google.com"
        expected {
          status = 200
        }
      }
    }
  }
  new {
    name = "echo test"
    tests = new {
      new {
        id = "initial"
        name = "can post headers"
        url = "https://postman-echo.com/headers"
        headers = new {
          ["x-redfish-test"] = "atestvalue"
        }
        expected {
          body = new JsonMatcher {
            expected {
              ["headers.x-redfish-test"] = "atestvalue"
            }
          }
        }
      }

      new {
        name = "repost extracted response"
        url = "https://postman-echo.com/post"
        method = "post"
        body = new FormBody {
          params {
            ["key1"] = new DataSource { sourceId = "initial" extractor = new JsonExtractor { path = "headers.x-redfish-test" } }
          }
        }
        expected {
          body = new JsonMatcher {
            expected {
              ["form.key1"] = "atestvalue"
              ["json.key1"] = "atestvalue"
              ["headers.content-type"] = "application/x-www-form-urlencoded"
            }
          }
        }
      }

      new {
        name = "repost extracted response json"
        url = "https://postman-echo.com/post"
        method = "post"
        body = new JsonBody {
          params {
            ["key1"] = new Mapping {
              ["key2"] = new DataSource { sourceId = "initial" extractor = new JsonExtractor { path = "headers.x-redfish-test" } }
            }
          }
        }
        expected {
          body = new JsonMatcher {
            expected {
              ["form.key1"] = null
              ["json.key1.key2"] = "atestvalue"
              ["headers.content-type"] = "application/json"
            }
          }
        }
      }
    }
  }
}

rules = new {
  new {
    rule = "*/0 0 0 1"
    job = pingTest
  }
}

producer  {
  prometheus  {
    url = "https://mimir.services.streamhippo.io"
    headers {
      ["Authorization"] = "basic " + read("env:MIMIR_AUTH")
      ["X-Scope-OrgId"] = "services"
    }
  }
}